@page "/plan-schedule/{id}"
@model Reserve.Pages.Appointment.CreateCalendarModel
@using Microsoft.Extensions.Localization
@using Reserve.Core.Features.Appointment
@using Reserve.Core
@inject IStringLocalizer<AppointmentLocalization> aL
@inject IStringLocalizer<Global> gL
@Html.AntiForgeryToken()
<style>
    a {
        color: #000000;
        text-decoration: none;
    }

    .fc .fc-button-primary {
        color: #FFFFFF;
        background-color: #06adef !important;
        border-color: #FFFFFF !important;
    }

        .fc .fc-button-primary:hover {
            color: #FFFFFF;
            background-color: #20a3d7 !important;
            border-color: #FFFFFF !important;
        }
</style>
<script src='https://fastly.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js'></script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.js"></script>

<div class="container">
    <h1 class="event-title">@aL["event-title"]</h1>
</div>
<div class="container">
    <p class="notification-text d-flex justify-content-center">@aL["notification-text"]</p>
</div>
<div class="d-flex flex-column justify-content-center align-items-center col-12">
    <div>
        <div class="d-flex flex-column align-items-center justify-content-center">
            <div class="d-flex flex-lg-row flex-sm-column justify-content-around create-calendar">
                <div class="d-flex align-items-center">
                    <label asp-for="NewAvailabilitySlot!.StartTime" class="form-label">@gL["from"]</label>
                </div>
                <input asp-for="NewAvailabilitySlot!.StartTime" type="datetime-local" name="NewAvailabilitySlot.StartTime" id="NewAvailabilitySlot_StartTime" class="form-control w-25 create-calendar-slots" />
                <div class="d-flex align-items-center">
                    <label asp-for="NewAvailabilitySlot!.EndTime" class="form-label">@gL["to"]</label>
                </div>
                <input asp-for="NewAvailabilitySlot!.EndTime" type="datetime-local" name="NewAvailabilitySlot.EndTime" id="NewAvailabilitySlot_EndTime" class="form-control w-25 create-calendar-slots" />
                <button class="btn reserve-blue-button create-calendar-slots" id="Add" type="button">@gL["add"]</button>
            </div>
            <span class="text-danger" id="error" data-start-time-required="@gL["start-time-required"]" data-end-time-after-start-time="@gL["end-time-after-start-time"]"
                  data-future-start-time="@gL["future-start-time"]" data-slot-added-success="@gL["slot-added-success"]" data-free-slot="@aL["free-slot"]"></span>
        </div>
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    </div>
</div>
<div id="calendar"></div>
<div class="d-flex justify-content-center mt-3">
    <button type="submit" onclick="postDataToServer('@Model.NewAppointmentCalendar?.Id.ToString()','@Model.NewAppointmentCalendar?.Name', '@Model.NewAppointmentCalendar?.Email','@Model.NewAppointmentCalendar?.Description')" class="btn btn-custom reserve-blue-button">@gL["continue"]</button>
</div>
<div id="localization"
     data-slot-removed-success="@gL["slot-removed-success"]"></div>


<script>
    let availableSlots = [];
    function formatLocalDateTime(inputValue) {
        const inputDate = new Date(inputValue);

        if (isNaN(inputDate.getTime())) {
            return "Invalid Date";
        }

        const day = String(inputDate.getDate()).padStart(2, '0');
        const month = String(inputDate.getMonth() + 1).padStart(2, '0');
        const year = inputDate.getFullYear();
        let hours = inputDate.getHours();
        const minutes = String(inputDate.getMinutes()).padStart(2, '0');
        const ampm = hours >= 12 ? 'PM' : 'AM';


        if (hours > 12) {
            hours -= 12;
        } else if (hours === 0) {
            hours = 12;
        }

        return `${month}/${day}/${year} ${hours}:${minutes} ${ampm}`;
    }

    document.addEventListener("DOMContentLoaded", function () {      
        var calendarEl = document.getElementById('calendar');
        var localizationElement = document.getElementById("localization");
        var slotRemovedSuccess = localizationElement.getAttribute('data-slot-removed-success');
        let calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay'
            },
            eventClick: function (info) {
                var event = info.event;
                event.remove();
                availableSlots = availableSlots.filter(function (slot) {
                    return slot.startTime !== event.start.toISOString() && slot.endTime !== event.end.toISOString();
                });
                toastr.info(slotRemovedSuccess);
            },
        });
        calendar.render();
        var errorElement = document.querySelector("#error");
        var addButton = document.getElementById("Add");
        var startTimeInput = document.getElementById("NewAvailabilitySlot_StartTime");
        var endTimeInput = document.getElementById("NewAvailabilitySlot_EndTime");
        var freeSlotText = errorElement.getAttribute('data-free-slot');
        addButton.addEventListener("click", function () {
            var startTime = startTimeInput.value;
            var endTime = endTimeInput.value;

            if (!startTime || !endTime) {
                errorElement.innerText = errorElement.getAttribute('data-start-time-required');
                return;
            }

            if (endTime <= startTime) {
                errorElement.innerText = errorElement.getAttribute('data-end-time-after-start-time');
                return;
            }

            if (startTime < new Date().toISOString().slice(0, 16)) {
                errorElement.innerText = errorElement.getAttribute('data-future-start-time');
                return;
            }

            errorElement.innerText = "";

            var event = {
                title: freeSlotText, // You can also localize this if needed
                start: new Date(startTime).toISOString(),
                end: new Date(endTime).toISOString(),
                backgroundColor: "#06adef",
                textColor: "#ffffff",
                borderColor: "#06adef",
            };

            availableSlots.push({
                startTime: new Date(startTime).toISOString(),
                endTime: new Date(endTime).toISOString()
            });

            calendar.addEvent(event);
            toastr.options.closeButton = true;
            toastr.info(errorElement.getAttribute('data-slot-added-success'));

            startTimeInput.value = "";
            endTimeInput.value = "";
        });
    }); 
</script>

<script>
    async function postDataToServer(id, name, email, description) {
        const url = "/create-calendar";

        const data = {
            id: id,
            name: name,
            email: email,
            description: description,
            availabilitySlots: availableSlots
        };
        console.log("Data to be sent:", data);

        var options = {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                "X-CSRF-TOKEN": document.querySelector('[name="__RequestVerificationToken"]').value,
                "Content-Type": "application/json"
            },
            redirect: 'follow',
            body: JSON.stringify(data)
        };

        try {
            var response = await fetch(url, options);
            console.log("Response:", response);
            if (response.ok) {
                const successHeader = response.headers.get('X-Success-Redirect');
                if (successHeader) {
                    window.location.href = successHeader;
                } else {
                    console.error('Request succeeded but no redirect header found');
                }
            } else {
                console.error('Request failed:', response.statusText);
            }
        } catch (error) {
            console.log("Fetch error:", error);
        }
    }

</script>

